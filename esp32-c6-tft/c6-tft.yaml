
esphome:
  name: "c6-screen-test"
  friendly_name: "c6-screen-test"

esp32:
  board: esp32-c6-devkitc-1
  framework:
    type: esp-idf

logger:
  level: INFO

api:
  encryption:
    key: "xxx"

ota:
  - platform: esphome
    password: "xxx"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

spi:
  clk_pin: GPIO7   # SCL/SCLK
  mosi_pin: GPIO16  # SDA/MOSI
  # miso_pin not needed for display-only

font:
  - file: "fonts/arial.ttf"
    id: my_font
    size: 20
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°µ³²"

display:
  - platform: st7789v
    model: CUSTOM # Use CUSTOM for generic ST7789 displays
    cs_pin: GPIO14
    dc_pin: GPIO19
    reset_pin: GPIO20
    backlight_pin: GPIO18
    rotation: 0
    width: 240
    height: 240
    offset_width: 0
    offset_height: 0
    # invert_colors: false
    update_interval: 5s
    pages:
      - id: main_page
        lambda: |-
          it.fill(Color::BLACK);
          it.printf(0, 0, id(my_font), Color(255, 165, 0), "Uptime: %s", id(my_formatted_uptime).state.c_str());  // Orange
          it.printf(0, 20, id(my_font), Color(255, 0, 0), "Temp: %.1fC", id(esp32_internal_temp).state);        // Red
          it.printf(0, 40, id(my_font), Color(0, 255, 255), "WiFi: %.0f dBm", id(wifi_signal_sensor).state);    // Cyan
          it.printf(0, 60, id(my_font), Color(255, 255, 0), "Status: OK", 0);                                   // Yellow

sensor:
  # Wifi Signal
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_sensor
    update_interval: 60s

  # Uptime
  - platform: uptime
    name: "Raw Uptime Sensor"
    id: my_raw_uptime
    unit_of_measurement: "s"

  # Internal Temperature
  - platform: internal_temperature
    name: "Internal Temperature"
    id: esp32_internal_temp
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    update_interval: 30s

text_sensor:
  # MAC Address
  - platform: wifi_info
    mac_address:
      name: "MAC Address"
      icon: mdi:network
  
  # Uptime
  - platform: template
    name: "Uptime"
    id: my_formatted_uptime
    update_interval: 30s
    lambda: |-
      float uptime_seconds = id(my_raw_uptime).state;
      char buffer[32];
      if (uptime_seconds < 3600) {
        sprintf(buffer, "%.0f min", uptime_seconds / 60.0);
      } else {
        sprintf(buffer, "%.1f hrs", uptime_seconds / 3600.0);
      }
      return {buffer};

  # Real Device Info from debug component
  - platform: debug
    device:
      name: "Device Info"
      id: device_info
    reset_reason:
      name: "Reset Reason"

switch:
  - platform: restart
    name: "Restart device"
